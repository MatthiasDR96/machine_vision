Traceback (most recent call last):
  File "c:\python39\lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "c:\python39\lib\site-packages\nbclient\client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\matth\AppData\Roaming\Python\Python39\site-packages\jupyter_core\utils\__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
  File "c:\python39\lib\asyncio\base_events.py", line 642, in run_until_complete
    return future.result()
  File "c:\python39\lib\site-packages\nbclient\client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "c:\python39\lib\site-packages\nbclient\client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "c:\python39\lib\site-packages\nbclient\client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Define transforms that will be applied to the downloaded images
transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,)),])

# Load MNIST training and test dataset
mnist_trainset = datasets.MNIST(root='../../data', train=True, download=False, transform=transform)
mnist_testset = datasets.MNIST(root='../../data', train=False, download=False, transform=transform)
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mMemoryError[0m                               Traceback (most recent call last)
Cell [1;32mIn[2], line 5[0m
[0;32m      2[0m transform [38;5;241m=[39m transforms[38;5;241m.[39mCompose([transforms[38;5;241m.[39mToTensor(), transforms[38;5;241m.[39mNormalize(([38;5;241m0.5[39m,), ([38;5;241m0.5[39m,)),])
[0;32m      4[0m [38;5;66;03m# Load MNIST training and test dataset[39;00m
[1;32m----> 5[0m mnist_trainset [38;5;241m=[39m [43mdatasets[49m[38;5;241;43m.[39;49m[43mMNIST[49m[43m([49m[43mroot[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43m../../data[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m[43mtrain[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m,[49m[43m [49m[43mdownload[49m[38;5;241;43m=[39;49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m[43m [49m[43mtransform[49m[38;5;241;43m=[39;49m[43mtransform[49m[43m)[49m
[0;32m      6[0m mnist_testset [38;5;241m=[39m datasets[38;5;241m.[39mMNIST(root[38;5;241m=[39m[38;5;124m'[39m[38;5;124m../../data[39m[38;5;124m'[39m, train[38;5;241m=[39m[38;5;28;01mFalse[39;00m, download[38;5;241m=[39m[38;5;28;01mFalse[39;00m, transform[38;5;241m=[39mtransform)

File [1;32mc:\python39\lib\site-packages\torchvision\datasets\mnist.py:104[0m, in [0;36mMNIST.__init__[1;34m(self, root, train, transform, target_transform, download)[0m
[0;32m    101[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28mself[39m[38;5;241m.[39m_check_exists():
[0;32m    102[0m     [38;5;28;01mraise[39;00m [38;5;167;01mRuntimeError[39;00m([38;5;124m"[39m[38;5;124mDataset not found. You can use download=True to download it[39m[38;5;124m"[39m)
[1;32m--> 104[0m [38;5;28mself[39m[38;5;241m.[39mdata, [38;5;28mself[39m[38;5;241m.[39mtargets [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_load_data[49m[43m([49m[43m)[49m

File [1;32mc:\python39\lib\site-packages\torchvision\datasets\mnist.py:123[0m, in [0;36mMNIST._load_data[1;34m(self)[0m
[0;32m    121[0m [38;5;28;01mdef[39;00m [38;5;21m_load_data[39m([38;5;28mself[39m):
[0;32m    122[0m     image_file [38;5;241m=[39m [38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00m[38;5;124m'[39m[38;5;124mtrain[39m[38;5;124m'[39m[38;5;250m [39m[38;5;28;01mif[39;00m[38;5;250m [39m[38;5;28mself[39m[38;5;241m.[39mtrain[38;5;250m [39m[38;5;28;01melse[39;00m[38;5;250m [39m[38;5;124m'[39m[38;5;124mt10k[39m[38;5;124m'[39m[38;5;132;01m}[39;00m[38;5;124m-images-idx3-ubyte[39m[38;5;124m"[39m
[1;32m--> 123[0m     data [38;5;241m=[39m [43mread_image_file[49m[43m([49m[43mos[49m[38;5;241;43m.[39;49m[43mpath[49m[38;5;241;43m.[39;49m[43mjoin[49m[43m([49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mraw_folder[49m[43m,[49m[43m [49m[43mimage_file[49m[43m)[49m[43m)[49m
[0;32m    125[0m     label_file [38;5;241m=[39m [38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00m[38;5;124m'[39m[38;5;124mtrain[39m[38;5;124m'[39m[38;5;250m [39m[38;5;28;01mif[39;00m[38;5;250m [39m[38;5;28mself[39m[38;5;241m.[39mtrain[38;5;250m [39m[38;5;28;01melse[39;00m[38;5;250m [39m[38;5;124m'[39m[38;5;124mt10k[39m[38;5;124m'[39m[38;5;132;01m}[39;00m[38;5;124m-labels-idx1-ubyte[39m[38;5;124m"[39m
[0;32m    126[0m     targets [38;5;241m=[39m read_label_file(os[38;5;241m.[39mpath[38;5;241m.[39mjoin([38;5;28mself[39m[38;5;241m.[39mraw_folder, label_file))

File [1;32mc:\python39\lib\site-packages\torchvision\datasets\mnist.py:539[0m, in [0;36mread_image_file[1;34m(path)[0m
[0;32m    538[0m [38;5;28;01mdef[39;00m [38;5;21mread_image_file[39m(path: [38;5;28mstr[39m) [38;5;241m-[39m[38;5;241m>[39m torch[38;5;241m.[39mTensor:
[1;32m--> 539[0m     x [38;5;241m=[39m [43mread_sn3_pascalvincent_tensor[49m[43m([49m[43mpath[49m[43m,[49m[43m [49m[43mstrict[49m[38;5;241;43m=[39;49m[38;5;28;43;01mFalse[39;49;00m[43m)[49m
[0;32m    540[0m     [38;5;28;01massert[39;00m x[38;5;241m.[39mdtype [38;5;241m==[39m torch[38;5;241m.[39muint8
[0;32m    541[0m     [38;5;28;01massert[39;00m x[38;5;241m.[39mndimension() [38;5;241m==[39m [38;5;241m3[39m

File [1;32mc:\python39\lib\site-packages\torchvision\datasets\mnist.py:523[0m, in [0;36mread_sn3_pascalvincent_tensor[1;34m(path, strict)[0m
[0;32m    520[0m [38;5;66;03m# The MNIST format uses the big endian byte order. If the system uses little endian byte order by default,[39;00m
[0;32m    521[0m [38;5;66;03m# we need to reverse the bytes before we can read them with torch.frombuffer().[39;00m
[0;32m    522[0m needs_byte_reversal [38;5;241m=[39m sys[38;5;241m.[39mbyteorder [38;5;241m==[39m [38;5;124m"[39m[38;5;124mlittle[39m[38;5;124m"[39m [38;5;129;01mand[39;00m num_bytes_per_value [38;5;241m>[39m [38;5;241m1[39m
[1;32m--> 523[0m parsed [38;5;241m=[39m torch[38;5;241m.[39mfrombuffer([38;5;28;43mbytearray[39;49m[43m([49m[43mdata[49m[43m)[49m, dtype[38;5;241m=[39mtorch_type, offset[38;5;241m=[39m([38;5;241m4[39m [38;5;241m*[39m (nd [38;5;241m+[39m [38;5;241m1[39m)))
[0;32m    524[0m [38;5;28;01mif[39;00m needs_byte_reversal:
[0;32m    525[0m     parsed [38;5;241m=[39m parsed[38;5;241m.[39mflip([38;5;241m0[39m)

[1;31mMemoryError[0m: 

